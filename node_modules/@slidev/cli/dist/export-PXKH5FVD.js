"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _chunkPL62CCCKjs = require('./chunk-PL62CCCK.js');




var _chunkIXNT7VMKjs = require('./chunk-IXNT7VMK.js');

// node/export.ts
_chunkIXNT7VMKjs.init_cjs_shims.call(void 0, );
var _path = require('path'); var _path2 = _interopRequireDefault(_path);
var _fsextra = require('fs-extra'); var _fsextra2 = _interopRequireDefault(_fsextra);
var _kolorist = require('kolorist');
var _cliprogress = require('cli-progress');
var _core = require('@slidev/parser/core');
function createSlidevProgress(indeterminate = false) {
  function getSpinner(n = 0) {
    return [_kolorist.cyan.call(void 0, "\u25CF"), _kolorist.green.call(void 0, "\u25C6"), _kolorist.blue.call(void 0, "\u25A0"), _kolorist.yellow.call(void 0, "\u25B2")][n % 4];
  }
  let current = 0;
  let spinner = 0;
  let timer;
  const progress = new (0, _cliprogress.SingleBar)({
    clearOnComplete: true,
    hideCursor: true,
    format: `  {spin} ${_kolorist.yellow.call(void 0, "rendering")}${indeterminate ? _kolorist.dim.call(void 0, _kolorist.yellow.call(void 0, "...")) : " {bar} {value}/{total}"}`,
    linewrap: false,
    barsize: 30
  }, _cliprogress.Presets.shades_grey);
  return {
    bar: progress,
    start(total) {
      progress.start(total, 0, { spin: getSpinner(spinner) });
      timer = setInterval(() => {
        spinner += 1;
        progress.update(current, { spin: getSpinner(spinner) });
      }, 200);
    },
    update(v) {
      current = v;
      progress.update(v, { spin: getSpinner(spinner) });
    },
    stop() {
      clearInterval(timer);
      progress.stop();
    }
  };
}
async function exportSlides({
  port = 18724,
  total = 0,
  range,
  format = "pdf",
  output = "slides",
  slides,
  base = "/",
  timeout = 3e4,
  dark = false,
  routerMode = "history",
  width = 1920,
  height = 1080,
  withClicks = false
}) {
  if (!_chunkPL62CCCKjs.packageExists.call(void 0, "playwright-chromium"))
    throw new Error("The exporting for Slidev is powered by Playwright, please installed it via `npm i -D playwright-chromium`");
  const pages = _core.parseRangeString.call(void 0, total, range);
  const { chromium } = await Promise.resolve().then(() => _chunkIXNT7VMKjs.__toESM.call(void 0, _chunkIXNT7VMKjs.__require.call(void 0, "playwright-chromium")));
  const browser = await chromium.launch();
  const context = await browser.newContext({
    viewport: {
      width,
      height: height * pages.length
    },
    deviceScaleFactor: 1
  });
  const page = await context.newPage();
  const progress = createSlidevProgress(true);
  async function go(no, clicks) {
    const path2 = `${no}?print${withClicks ? "=clicks" : ""}${clicks ? `&clicks=${clicks}` : ""}`;
    const url = routerMode === "hash" ? `http://localhost:${port}${base}#${path2}` : `http://localhost:${port}${base}${path2}`;
    await page.goto(url, {
      waitUntil: "networkidle",
      timeout
    });
    await page.waitForLoadState("networkidle");
    await page.emulateMedia({ colorScheme: dark ? "dark" : "light", media: "screen" });
    const elements = await page.locator("[data-waitfor]");
    const count = await elements.count();
    for (let index = 0; index < count; index++) {
      const element = await elements.nth(index);
      const attribute = await element.getAttribute("data-waitfor");
      if (attribute)
        await element.locator(attribute).waitFor();
    }
    const frames = await page.frames();
    await Promise.all(frames.map((frame) => frame.waitForLoadState()));
  }
  async function genPagePdf() {
    if (!output.endsWith(".pdf"))
      output = `${output}.pdf`;
    await go("print");
    await page.pdf({
      path: output,
      width,
      height,
      margin: {
        left: 0,
        top: 0,
        right: 0,
        bottom: 0
      },
      printBackground: true,
      preferCSSPageSize: true
    });
  }
  async function genPagePng() {
    await go("print");
    const slides2 = await page.locator(".slide-container");
    const count = await slides2.count();
    for (let i = 0; i < count; i++) {
      progress.update(i + 1);
      const buffer = await slides2.nth(i).screenshot();
      await _fsextra2.default.ensureDir(output);
      await _fsextra2.default.writeFile(_path2.default.join(output, `${(i + 1).toString().padStart(2, "0")}.png`), buffer);
    }
  }
  async function genPageMd(pages2, slides2) {
    var _a, _b, _c;
    const mds = [];
    for (const i of pages2) {
      const mdImg = `![${(_a = slides2[i - 1]) == null ? void 0 : _a.title}](./${output}/${i.toString().padStart(2, "0")}.png)

`;
      const mdNote = ((_b = slides2[i - 1]) == null ? void 0 : _b.note) ? `${(_c = slides2[i - 1]) == null ? void 0 : _c.note}

` : "";
      mds.push(`${mdImg}${mdNote}`);
    }
    if (!output.endsWith(".md"))
      output = `${output}.md`;
    await _fsextra2.default.writeFile(output, mds.join(""));
  }
  progress.start(pages.length);
  if (format === "pdf") {
    await genPagePdf();
  } else if (format === "png") {
    await genPagePng();
  } else if (format === "md") {
    await genPagePng();
    await genPageMd(pages, slides);
  } else {
    throw new Error(`Unsupported exporting format "${format}"`);
  }
  progress.stop();
  browser.close();
  return output;
}


exports.exportSlides = exportSlides;
